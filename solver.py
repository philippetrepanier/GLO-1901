"""
    Ce fichier est responsable de la r√©solution du sudoku par backtracking
"""
__auteur__ = "IDUL"
__date__ = "2016-12-09"
__coequipiers__ = "IDUL", "IDUL"

import itertools
from copy import deepcopy
from colorama import init, Fore

init(convert=True)

class Grille:
    """
        Classe grille qui est responsable des op√©rations sur la grille et du stockage des valeurs
    """
    def __init__(self, lignesfichier):
        """
            Lors de l'initialisation d'un objet Grille les donn√©es sont mises en m√©moire
            sous forme de dictionnaire afin de pouvoir les manipuler plus facilement
        :param lignesfichier: Lignes du fichier sources (longueur maxi de 81 char)
        """
        # D√©finitions de concepts g√©n√©raux
        self.colonnes = "123456789"
        self.lignes = "ABCDEFGHI"
        self.cases = {}
        l3 = ["ABC", "DEF", "GHI"]
        c3 = ["123", "456", "789"]
        self.carr√©s = list(itertools.product(l3, c3))

        compte = 0
        for l in self.lignes:
            self.cases[l] = {}
            for c in self.colonnes:
                if lignesfichier[compte] == "." or lignesfichier[compte] == "0":
                    self.cases[l][c] = self.colonnes
                else:
                    self.cases[l][c] = lignesfichier[compte]
                compte += 1
        self.original = deepcopy(self.cases)

    def __str__(self):
        """
            La fonction permet de faire un print(objet) afin d'afficher la grille en console
        :return: permet de retourner une grille avec mise en page
        """
        compte = 0
        res = "     1  2  3   4  5  6   7  8  9 \n   \u2554" + "\u2550" * 9 + \
              "\u2566" + "\u2550" * 9 + "\u2566" + "\u2550" * 9 + "\u2557" + '\n'
        for l in self.lignes:
            liste = []
            for c in self.colonnes:
                if self.cases[l][c] != '123456789':
                    liste.append(self.cases[l][c])
                else:
                    liste.append('.')
            res += ' ' + l + ' \u2551 {0[0]}  {0[1]}  {0[2]} \u2551 {0[3]}  {0[4]}  {0[5]} \u2551 {0[6]}  {0[7]}  {0[8]} \u2551'.format(
                liste) + '\n'
            compte += 1
            if compte == 3 or compte == 6:
                res += 3 * ' ' + "\u2560" + "\u2550" * 9 + "\u256C" + "\u2550" * 9 + \
                       "\u256C" + "\u2550" * 9 + "\u2563" + "\n"
        res += "   \u255A" + "\u2550" * 9 + "\u2569" + "\u2550" * 9 + "\u2569" + "\u2550" * 9 + "\u255D"
        return res

    def reduire(self, griller√©duite=None):
        """
            Fonction qui r√©duit les possibilit√©s de la grille en prenant en consid√©ration
            les valeurs qui sont exactes et qui ont une seule place possible.
        :return: Retourne False si des conditions de la grille ne sont respect√©es
        """
        if griller√©duite is None:
            griller√©duite = deepcopy(self.cases)
        if griller√©duite is False:
            return False
        for l, v in griller√©duite.items():
            for c, n in v.items():
                if len(n) == 1:
                    for l2 in self.lignes:
                        if l2 != l:
                            if griller√©duite[l][c] == griller√©duite[l2][c]:
                                return False
                            else:
                                griller√©duite[l2][c] = griller√©duite[l2][c].replace(str(griller√©duite[l][c]), '')
                    for c2 in self.colonnes:
                        if c2 != c:
                            if griller√©duite[l][c] == griller√©duite[l][c2]:
                                return False
                            else:
                                griller√©duite[l][c2] = griller√©duite[l][c2].replace(str(griller√©duite[l][c]), '')
                    for l3, c3 in self.carr√©s:
                        if c in c3 and l in l3:
                            for l4 in l3:
                                for c4 in c3:
                                    if l4 != l and c4 != c:
                                        if griller√©duite[l][c] == griller√©duite[l4][c4]:
                                            return False
                                        else:
                                            griller√©duite[l4][c4] = griller√©duite[l4][c4].replace(
                                                str(griller√©duite[l][c]), '')
                else:
                    continue
        return griller√©duite

    def reduire2(self, griller√©duite=None):
        """
            Fonction qui fixe les valeurs dans les carr√©s dont la possibilit√© est certaine
        """
        if griller√©duite is None:
            griller√©duite = deepcopy(self.cases)
        if griller√©duite is False:
            return False
        for ligne, colonne in self.carr√©s:
            for num in self.colonnes:
                compte = 0
                lo = 'Z'
                co = '0'
                for l in ligne:
                    for c in colonne:
                        n = griller√©duite[l][c]
                        if num in n:
                            compte += 1
                            co = c
                            lo = l
                        else:
                            continue
                if compte == 1:
                    griller√©duite[lo][co] = str(num)
        return griller√©duite

    def recherche(self, grille=None):
        if grille is None:
            grille = self.cases
        if grille is False:
            return False
        if self.resolu(grille):
            self.cases = grille
            return True
        compte = 0
        for l, v in grille.items():
            for c, n in v.items():
                compte += len(n)
        if compte == 81:
            return False
        (elem, minimumligne, minimumcol) = self.minimum(grille)
        for num in elem:
            griller = deepcopy(grille)
            griller[minimumligne][minimumcol] = str(num)
            self.recherche(self.reduire2(self.reduire(griller)))

    def minimum(self, grille=None):
        if grille is None:
            grille = self.cases
        if grille is False:
            return False
        minimumligne = "0"
        minimumcol = "Z"
        lenmini = 9
        for l, v in grille.items():
            for c, n in v.items():
                if lenmini > len(n) > 1:
                    lenmini = len(n)
                    minimumcol = c
                    minimumligne = l
        return grille[minimumligne][minimumcol], minimumligne, minimumcol

    def resolu(self, grille=None):
        """
            Permet de v√©rifier si toute la grille contient un √©l√©ment et qu'il est diff√©rent
            pour chaque colonne.
            La v√©rification est faite avec une somme v√©rifiant l'unicit√© de la solution.

            Il faut implanter une v√©rification similaire en carr√©s
        :return: Retourne False si il y a contradiction, sinon True
        """
        if grille is None:
            grille = self.cases
        if grille is False:
            return False
        for l, v in grille.items():
            verifligne = 0
            for c, n in v.items():
                if len(n) != 1:
                    return False
                else:
                    verifligne += 2 ** (int(n) - 1)
            if verifligne != 511:
                return False
        for c2 in self.colonnes:
            verifcol = 0
            for l2 in self.lignes:
                n = grille[l2][c2]
                if len(n) != 1:
                    return False
                else:
                    verifcol += 2 ** (int(n) - 1)
            if verifcol != 511:
                return False
        return True

    def valide(self, grille=None):
        """
            Permet de v√©rifier s'il y a une incoh√©rence dans la grille
        :return: Retourne False si il y a contradiction, sinon True
        """
        if grille is None:
            grille = self.cases
        if grille is False:
            return False
        for v in self.colonnes:
            for c in self.colonnes:
                if sum(1 for d in self.cases if self.cases[d][c] == v) > 1:
                    return False
        for v in self.colonnes:
            for d in self.lignes:
                if sum(1 for c in self.colonnes if self.cases[d][c] == v) > 1:
                    return False
        return True

    def entr√©e(self, grille=None):
        if grille is None:
            grille = self.cases
        if grille is False:
            return False
        ligne = input('Entrez la ligne (A-I): ')
        if ligne.upper() in self.lignes and not ligne == '':
            colonne = input("Entrez la colonne (1-9): ")
            if colonne in self.colonnes and not colonne == '':
                chiffre = input('Entrez votre chiffre: ')
                if chiffre not in self.colonnes or chiffre == '':
                    print('Le chiffre entr√© est invalide')
                    self.entr√©e()
                else:
                    grille[ligne.upper()][colonne] = str(Fore.GREEN + chiffre + Fore.RESET)
                    if self.original[ligne.upper()][colonne] == '123456789':
                        if self.valide():
                            print('\n' + str(self))
                            self.entr√©e()
                        elif self.resolu():
                            print(self)
                            print('Le sudoku est r√©solu! Bravo üôÇ')
                        else:
                            print('Chiffre non valide')
                            grille[ligne.upper()][colonne] = '123456789'
                            self.entr√©e()
                    else:
                        print('Vous ne pouvez pas modifier ce chiffre!')
                        self.entr√©e()
            else:
                print('Colonne non valide')
                self.entr√©e()
        else:
            print('Ligne non valide')
            self.entr√©e()
